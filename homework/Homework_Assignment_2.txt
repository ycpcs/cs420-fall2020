CS420
HW2
======
To be submitted as a PDF via the Assignments tab on Canvas.
You can handwrite and scan your solutions or generate a PDF 
from your favorite word processor.  However, only PDFs can 
be uploaded on Canvas (i.e. no .docx, .txt, .odt will be 
accepted).
======

1) What are the two models of interprocess communication? What are the strengths and weaknesses of the two approaches?



2) Including the initial parent process, how many processes are created by the program shown below?  Briefly explain how you arrived at your answer.

    #include <stdio.h>
    #include <unistd.h>

    int main()
    {
        /* fork a child process */
        fork();

        /* fork another child process */
        fork();

        /* and fork another */
        fork();

        return 0;
    }



3) Using the program below, identify the values of pid at lines A, B, C, and D.  (Assume that the actual pids of the parent and child are 2600 and 2603, respectively.)  Explain how you arrived at your answer.

    #include <sys/types.h>
    #include <stdio.h>
    #include <unistd.h>

    int main()
    {
        pid_t pid, pid1;

        /* fork a child process */
        pid = fork();

        if (pid < 0) {  /* error occurred */
            fprintf(stderr, "Fork Failed");
            return 1;
        }
        else if (pid == 0) {  /* child process */
            pid1 = getpid();
            printf("child: pid = %d", pid);    /* A */
            printf("child: pid1 = %d", pid1);  /* B */
        }
        else {  /* parent process */
            pid1 = getpid();
            printf("parent: pid = %d", pid);    /* C */
            printf("parent: pid1 = %d", pid1);  /* D */
            wait(NULL);
        }

        return 0;
    }



4) Using the program shown below, EXPLAIN what the output will be at Line A.  That is, don't simply write down what the output is.  Determine what the output is, and explain how you arrived at your answer.

    #include <sys/types.h>
    #include <stdio.h>
    #include <unistd.h>

    int value = 5;

    int main()
    {
        pid_t pid;

        pid = fork();

        if (pid == 0) {  /* child process */
            value += 15;
            return 0;
        }
        else if (pid > 0) {  /* parent process */
            wait(NULL);
            printf("PARENT: value = %d\n", value);  /* LINE A */
            return 0;
        }
    }


